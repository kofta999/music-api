// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../dev.db"
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  publicId  String   @unique
  // emailVerified Boolean
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password  String

  playlists        Playlist[]
  followedArtists  Follow[]
  listeningHistory ListeningHistory[]
  // Session       Session[]
  // Account       Account[]

  @@map("user")
}

// model Session {
//   id        String   @id
//   expiresAt DateTime
//   ipAddress String?
//   userAgent String?
//   userId    String
//   users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("session")
// }

// model Account {
//   id           String    @id
//   accountId    String
//   providerId   String
//   userId       String
//   users        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   accessToken  String?
//   refreshToken String?
//   idToken      String?
//   expiresAt    DateTime?
//   password     String?

//   @@map("account")
// }

// model Verification {
//   id         String   @id
//   identifier String
//   value      String
//   expiresAt  DateTime

//   @@map("verification")
// }

model Song {
  id               Int                @id @default(autoincrement())
  publicId         String             @unique
  title            String
  artistId         Int
  artist           Artist             @relation(fields: [artistId], references: [id])
  albumId          Int?
  album            Album?             @relation(fields: [albumId], references: [id])
  duration         Int // Duration in seconds
  genre            String?
  releaseDate      DateTime
  audioUrl         String
  coverArt         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  playlists        PlaylistSong[]
  ListeningHistory ListeningHistory[]

  @@map("song")
}

model Artist {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique
  name      String
  bio       String?
  imageUrl  String?
  songs     Song[]
  albums    Album[]
  followers Follow[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("artist")
}

model Album {
  id          Int      @id @default(autoincrement())
  publicId    String   @unique
  title       String
  artistId    Int
  artist      Artist   @relation(fields: [artistId], references: [id])
  releaseDate DateTime
  coverArt    String?
  songs       Song[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("album")
}

model Playlist {
  id          Int            @id @default(autoincrement())
  publicId    String         @unique
  name        String
  description String?
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  songs       PlaylistSong[]

  @@map("playlist")
}

model PlaylistSong {
  id         Int      @id @default(autoincrement())
  playlistId Int
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  songId     Int
  song       Song     @relation(fields: [songId], references: [id])
  addedAt    DateTime @default(now())

  @@unique([playlistId, songId])
  @@map("playlist_song")
}

model Follow {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  artistId  Int
  artist    Artist   @relation(fields: [artistId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, artistId])
  @@map("follow")
}

model ListeningHistory {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  songId    Int
  Song      Song     @relation(fields: [songId], references: [id])
  updatedAt DateTime @updatedAt

  @@unique([userId, songId])
  @@map("listening_history")
}
